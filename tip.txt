@Column(updatable = false)
ㄴ값이 바뀌어도 변경감지 안함. 테스트할때 불편해서 껐음

@RequestBody: 기본생성자, getter 사용

@ModelAttribute: @Setter or @AllArgCons
ㄴ@GetMapping에 주로 사용. POST, PUT, DELETE는 @RequestBody 사용
ㄴ내부적으로 @RequestParam 이용

row 개수가 적다면? → findAllByMemberId + Stream
row 개수가 많다면? → existsBy로 바로 DB에서 검사

오버로드 생성자는 네이밍 불명확
->정적 팩토리 메서드 사용
->정적 팩토리 메서드는 setter 필요
->setter는 유지 보수 감소
->정적 메서드 안에서 private 생성자 사용
단, 양방향 연관관계 일때 억지로 푸는 것 보다 setter를 사용하는 게 편함
https://www.inflearn.com/community/questions/16235/%EC%83%9D%EC%84%B1-%EB%A9%94%EC%84%9C%EB%93%9C-setter-%EC%A7%88%EB%AC%B8?srsltid=AfmBOor1YhiRGTb_RZTHJrufY3IVYMo_zxKiBYZNVIAnqLwA_3zYSIiH

영속성 컨텍스트 1차 캐시 재사용은 findById만 가능
https://limyohwan.tistory.com/62

@PreAuthorize: AOP가 먼저 실행되도록 보장하지 않음. AOP가 먼저 실행되도록 하려면 @Secured 사용

[파일 업로드 팁]
application/json -> @RequestBody
multipart/form-data OR application/x-www-form-urlencoded -> @RequestParam, @ModelAttribute 둘다 가능
multipart/form-data -> @RequestPart

@RequestBody: List<ItemVo> 가능. ONLY JSON

@ModelAttribute: List<ItemVo> 불가 -> ItemVoWrapper 감싸기. @ModelAttribute 변수명 무관.
ㄴ API 요청 시 requests[0].colorItemId: 3, requests[0].files: (바이너리) 이렇게 따로 여러번 할당해서 보내야 함
ㄴ JSON 인식 못해서 people.name = "john" 이렇게 해야 함.

@RequestPart: List<ItemVo> 불가. JSON 안에 파일을 못 넣기 때문.
ㄴ JSON 과 파일을 분리해도 되면 가능. API 요청시 json part는 콘텐츠 타입(application/json) 지정 필수.
ㄴ @RequestPart 변수명으로 매핑해서 requests[0] 안됨. 인덱스 없이 requests만 달랑 보내야 함

JSON 안에 파일을 못 넣는 이유: 콘텐츠 타입이 통일되지 않아서.
ㄴ단, multipart/form-data 처럼 파트마다 다르게 지정하는 건 가능

스웨거 파일 업로드 테스트할 때 컨텐츠 타입 지정 못해서, @ModelAttribute @RequestPart 둘다 "Content type 'application/octet-stream' not supported" 에러 발생
ㄴ스프링 MultipartJackson2HttpMessageConverter 등록 필요

form-data 디폴트 content-type
ㄴ html <form> tag: application/x-www-form-urlencoded (변경 가능)
ㄴ js formData: multipart/form-data
ㄴ postman: multipart/form-data

@ModelAttribute 바인딩 생성자 우선순위
ㄴ@NoArgsConstructor > @AllArgsConstructor.  @NoArgsConstructor가 실행되므로 setter 필요
ㄴ단, @NoArgsConstructor(access = AccessLevel.PROTECTED) < @AllArgsConstructor

CorsFilter는 @Order(Ordered.HIGHEST_PRECEDENCE) 필요X
ㄴCORS 응답은 서버는 요청을 수행하지만 브라우저가 거절하는거기 때문.
ㄴ스프링 시큐리티 필터체인이 관리하는 필터가 사용자 정의 필터보다 우선순위가 높음. CORS 필터는 상관없지만 다른 필터만들때 주의
ㄴ스프링 시큐리티 AOP도 우선순위가 높음

8080포트는 EC2 IP만 허용해야 함 (아에 막으면 포트포워딩 안됨)
ㄴnginX가 아니라 스프링부트가 직접 리스닝해서 http:dldm.kr:8080/api 접속되기 때문

포트원 웹훅은 안정적이지만 클라이언트로 응답을 못보내서 ifarme, redirectUrl로 했다.
ㄴ ifarme은 원래 @RequsetBody였는데 redirectUr이 포트원 서버에서 주문정보를 가져와서, 포트원 서버에서 가져오는 방법으로 통일했다.